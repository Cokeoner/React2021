{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertAdd.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","handleInputChanche","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertAdd","categories","i","ReactDOM","render","document","getElementById"],"mappings":"oLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sCCJDQ,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAI1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAOP,GAAP,mBAAsBO,OACxCC,QAAQC,IAAI,UACZR,EAAc,KAG1BO,QAAQC,IAAI,UAMJ,SAEI,uBACIC,KAAO,OACPC,MAASX,EACTY,SAAW,SAACT,GAAD,OAzBI,SAACA,GACxBF,EAAeE,EAAEU,OAAOF,OAwBEG,CAAmBX,SAOrDN,EAAYkB,UAAY,CACpBjB,cAAekB,IAAUC,KAAKC,Y,mCCxCrBC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAQV,EAAU,EAAVA,IAEnC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCDJO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECLwB,SAAEA,GAE1B,MAA0BrB,mBAAS,CAC/B4B,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WAEPxB,EAASC,GACR7B,MAAM,SAACqD,GACAF,EAAS,CACLf,KAAMiB,EACNJ,SAAS,SAMvB,CAACpB,IAEIqB,EDhB2BI,CAAczB,GAAlCa,EAAd,EAAQN,KAAea,EAAvB,EAAuBA,QAEvB,OACI,qCACA,qBAAIJ,UAAU,oCAAd,cAAqDhB,KACnDoB,GAAW,mBAAGJ,UAAU,mCAAb,uBACb,qBAAKA,UAAU,aAAf,SAEUH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEdhBe,EAAe,WAIzB,MAAoC/C,mBAAS,CAAC,cAA9C,mBAAOgD,EAAP,KAAmBjD,EAAnB,KAQC,OACI,gCACI,8CACA,cAAC,EAAD,CAAcA,cAAiBA,IAC/B,uBAIA,6BAEQiD,EAAWlB,KAAK,SAACT,EAAU4B,GAAX,OACZ,cAAC,EAAD,CACI5B,SAAaA,GACLA,YCtBpC6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BhE,M","file":"static/js/main.b45415c6.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories}) => {\r\n\r\n    \r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChanche = (e) => {\r\n        setinputValue( e.target.value );\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [  inputValue, ...cats]);\r\n            console.log('sdsdsd')\r\n            setinputValue('');\r\n        }\r\n\r\nconsole.log('dsdsd')\r\n        //console.log('submit hecho')\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n\r\n            <input \r\n                type = \"Text\"\r\n                value = {inputValue}\r\n                onChange={ (e) => handleInputChanche(e)}\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async ( category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=GHgZQdqpRTEGzf8fzjkIXul7DwP2krj1`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return{ \r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n} ","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title , url} ) => {\r\n    \r\n    return (\r\n        <div className=\"cards animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\n import { GifGridItem } from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n   \r\n    const { data: images , loading} = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\"> { category }</h3>\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading..</p> }\r\n        <div className=\"cards-grid\">              \r\n              {\r\n                  images.map( img => (\r\n                    <GifGridItem \r\n                    key={img.id }\r\n                    { ...img } />\r\n                  ))\r\n              }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n        .then( (imgs) => {            \r\n                setState({ \r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n        }) \r\n\r\n\r\n\r\n    },[category]);\r\n\r\n    return state;\r\n\r\n}\r\n","import React,{ useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertAdd = () => {\r\n\r\n    //const categories = ['One punch', 'Samuray x', 'Dragon Ball'];\r\n\r\n   const [categories, setCategories] = useState(['One punch'])\r\n\r\n    // const handleAdd = (e) => {\r\n    //     setcategories([e,...categories]) //puedes agregar valor\r\n    //     console.log(e)\r\n         \r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory  setCategories = {setCategories}/>\r\n            <hr/>\r\n\r\n            {/* <button onClick={() => handleAdd('mulan')}> Agregar </button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category, i) => \r\n                        <GifGrid \r\n                            category = { category }\r\n                            key = { category }\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertAdd;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertAdd } from './GifExpertAdd'\n\n\nReactDOM.render(\n    // <App />,\n    <GifExpertAdd />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}